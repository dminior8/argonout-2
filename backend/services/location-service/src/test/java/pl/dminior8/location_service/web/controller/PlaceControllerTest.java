package pl.dminior8.location_service.web.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.hibernate.validator.internal.metadata.raw.ConstrainedField;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.MediaType;
import org.springframework.restdocs.RestDocumentationExtension;
import org.springframework.restdocs.constraints.ConstraintDescriptions;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import pl.dminior8.location_service.domain.Place;
import pl.dminior8.location_service.repository.PlaceRepository;
import pl.dminior8.location_service.service.PlaceService;
import pl.dminior8.location_service.web.model.PlaceDTO;

import java.util.Optional;
import java.util.UUID;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.restdocs.snippet.Attributes.key;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.util.StringUtils.collectionToDelimitedString;

@ExtendWith(RestDocumentationExtension.class)
@AutoConfigureRestDocs //has props to change URI
@WebMvcTest(PlaceController.class)
@ComponentScan//(basePackages = "pl.dminior8.location_service.mapper")
class PlaceControllerTest {

    @Autowired
    MockMvc mockMvc;

    @Autowired
    ObjectMapper objectMapper;

    @MockitoBean
    private PlaceService placeService;

    @MockitoBean
    private PlaceRepository placeRepository;

    PlaceDTO placeDTO;

    @BeforeEach
    public void setUp(){
        placeDTO = PlaceDTO.builder()
                .name("Test Place")
                .latitude(52.0)
                .longitude(21.0)
                .description("Test Description")
                .moreInfoLink("https://www.google.com/")
                .build();
    }

    @Test
    void getPlaceById() throws Exception {
        given(placeService.findById(any())).willReturn(placeDTO);

        ConstrainedFields fields = new ConstrainedFields(PlaceDTO.class);

        mockMvc.perform(get("/api/v1/places/" + UUID.randomUUID().toString())
                        //.param("page", "1")
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andDo(document("v1/place-get/", //generate docs for request and response

//                        pathParameters(
//                                parameterWithName("page").description("Current page of place list")
//                        ),
//                        queryParameters(
//                            parameterWithName("page").description("Is cold?")
//                        ),
                        responseFields(
                                //fieldWithPath("id").description("ID of the Place, generated by the system"),
                                fields.withPath("id").description("ID of the Place, generated by the system").type(UUID.class),
                                fields.withPath("name").description("Name of the Place, cannot be blank"),
                                fields.withPath("description").description("Description of the Place"),
                                fields.withPath("latitude").description("Latitude coordinate of the Place, cannot be null"),
                                fields.withPath("longitude").description("Longitude coordinate of the Place, cannot be null"),
                                fields.withPath("moreInfoLink").description("Link with more information about the Place"),
                                fields.withPath("visited").description("Indicates whether the Place has been visited (true/false)")
                        )));
    }

    @Test
    void setPlace() throws Exception {
        given(placeRepository.save(any())).willReturn(Place.class);
        String placeDtoJson = objectMapper.writeValueAsString(placeDTO);
        ConstrainedFields fields = new ConstrainedFields(PlaceDTO.class);

        mockMvc.perform(post("/api/v1/places")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(placeDtoJson))
                .andExpect(status().isCreated())
                .andDo(document("v1/place-new/",
                        requestFields(
                                fields.withPath("id").ignored().type(UUID.class),
                                fields.withPath("name").description("Name of the Place, generated by the system"),
                                fields.withPath("description").description("Description of the Place"),
                                fields.withPath("latitude").description("Latitude coordinate of the Place, cannot be null"),
                                fields.withPath("longitude").description("Longitude coordinate of the Place, cannot be null"),
                                fields.withPath("moreInfoLink").description("Link with more information about the Place"),
                                fields.withPath("visited").description("Indicates whether the Place has been visited (true/false)")
                )));
    }

    @Test
    void editPlace() throws Exception {
        //given
        String placeDtoJson = objectMapper.writeValueAsString(placeDTO);
        ConstrainedFields fields = new ConstrainedFields(PlaceDTO.class);

        //when
        mockMvc.perform(put("/api/v1/places/{placeId}", UUID.randomUUID().toString())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(placeDtoJson))
                .andExpect(status().isCreated())
                .andDo(document("v1/place-edit/", // Documentation for PUT request
                        pathParameters(
                                parameterWithName("placeId").description("ID of the place to be updated")
                        ),
                        requestFields(
                                fields.withPath("id").ignored().type(UUID.class),
                                fields.withPath("name").description("Name of the place, generated by the system"),
                                fields.withPath("description").description("Description of the place"),
                                fields.withPath("latitude").description("Latitude coordinate of the place, cannot be null"),
                                fields.withPath("longitude").description("Longitude coordinate of the place, cannot be null"),
                                fields.withPath("moreInfoLink").description("Link to more information about the place"),
                                fields.withPath("visited").description("Indicates whether the place has been visited (true/false)")
                        )
                ));

        //then
        then(placeService).should().editById(any(),any());
    }

    @Test
    void deletePlaceById() throws Exception {
        mockMvc.perform(delete("/api/v1/places/{placeId}", UUID.randomUUID().toString())
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andDo(document("v1/place-delete/",
                        pathParameters(
                                parameterWithName("placeId").description("ID of Place to delete")
                        )
                ));

    }

    private static final class ConstrainedFields {
        private final ConstraintDescriptions constraintDescriptions;

        public ConstrainedFields(Class<?> input) {
            this.constraintDescriptions = new ConstraintDescriptions(input);
        }

        public FieldDescriptor withPath(String path) {
            return fieldWithPath(path)
                    .attributes(
                            key("constraints")
                                    .value(
                                            collectionToDelimitedString(
                                                    this.constraintDescriptions.descriptionsForProperty(path), "- ")));
        }
    }
}
